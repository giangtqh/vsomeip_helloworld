/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_COMMONAPI_EXAMPLES_HELLO_WORLD_SOMEIP_STUB_ADAPTER_HPP_
#define V0_COMMONAPI_EXAMPLES_HELLO_WORLD_SOMEIP_STUB_ADAPTER_HPP_

#include <v0/commonapi/examples/HelloWorldStub.hpp>
#include <v0/commonapi/examples/HelloWorldSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {
namespace examples {

template <typename _Stub = ::v0::commonapi::examples::HelloWorldStub, typename... _Stubs>
class HelloWorldSomeIPStubAdapterInternal
    : public virtual HelloWorldStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> HelloWorldSomeIPStubAdapterHelper;

    ~HelloWorldSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        HelloWorldSomeIPStubAdapterHelper::deinit();
    }

    void fireOnRoutineControlEvent(const uint16_t &_Identifier, const ::v0::commonapi::examples::HelloWorld::RoutineControlType &_controlType, const CommonAPI::ByteBuffer &_buffer);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        CommonAPI::Version
    > getHelloWorldInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > sayHelloStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v0::commonapi::examples::HelloWorldStub,
        std::tuple< uint16_t, HelloWorld::RoutineControlType, uint8_t, CommonAPI::ByteBuffer>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint16_t>, ::v0::commonapi::examples::HelloWorld_::RoutineControlTypeDeployment_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>, CommonAPI::SomeIP::ByteBufferDeployment>,
        std::tuple< >
    > routineResultStubDispatcher;
    
    HelloWorldSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        HelloWorldSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< HelloWorldStub>(_stub)),
        getHelloWorldInterfaceVersionStubDispatcher(&HelloWorldStub::lockInterfaceVersionAttribute, &HelloWorldStub::getInterfaceVersion, false, true),
        sayHelloStubDispatcher(
            &HelloWorldStub::sayHello,
            false,
            _stub->hasElement(0),
            std::make_tuple(&::v0::commonapi::examples::HelloWorld_::sayHello_nameDeployment),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)))
        
        ,
        routineResultStubDispatcher(
            &HelloWorldStub::routineResult,
            false,
            _stub->hasElement(1),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr), static_cast< ::v0::commonapi::examples::HelloWorld_::RoutineControlTypeDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr), static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr)),
            std::make_tuple())
        
    {
        HelloWorldSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7530) }, &sayHelloStubDispatcher );
        HelloWorldSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7531) }, &routineResultStubDispatcher );
        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x8001));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireOnRoutineControlEvent(const uint16_t &_Identifier, const ::v0::commonapi::examples::HelloWorld::RoutineControlType &_controlType, const CommonAPI::ByteBuffer &_buffer) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deployed_Identifier(_Identifier, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< HelloWorld::RoutineControlType, ::v0::commonapi::examples::HelloWorld_::RoutineControlTypeDeployment_t> deployed_controlType(_controlType, static_cast< ::v0::commonapi::examples::HelloWorld_::RoutineControlTypeDeployment_t* >(nullptr));
    CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment> deployed_buffer(_buffer, static_cast< CommonAPI::SomeIP::ByteBufferDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> > 
    ,  CommonAPI::Deployable< ::v0::commonapi::examples::HelloWorld::RoutineControlType, ::v0::commonapi::examples::HelloWorld_::RoutineControlTypeDeployment_t > 
    ,  CommonAPI::Deployable< CommonAPI::ByteBuffer, CommonAPI::SomeIP::ByteBufferDeployment > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8001),
            false,
             deployed_Identifier 
            ,  deployed_controlType 
            ,  deployed_buffer 
    );
}


template <typename _Stub, typename... _Stubs>
void HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v0::commonapi::examples::HelloWorldStub, typename... _Stubs>
class HelloWorldSomeIPStubAdapter
    : public HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    HelloWorldSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace examples
} // namespace commonapi
} // namespace v0

#endif // V0_COMMONAPI_EXAMPLES_Hello_World_SOMEIP_STUB_ADAPTER_HPP_
